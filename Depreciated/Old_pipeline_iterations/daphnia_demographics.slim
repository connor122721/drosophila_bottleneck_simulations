// Simple neutral simulation
initialize() {

	// Mutation rate
	initializeMutationRate(5.69e-9);

	// Mutation parameters
	initializeMutationType("m1", 0.5, "f", 0.0); // Neutral
	initializeMutationType("m2", 0.8, "e", 0.1); // Beneficial
	initializeMutationType("m3", 0.1, "g", -0.03, 0.2); // Deleterious

	// Genome
	initializeGenomicElementType("g1", c(m1, m2, m3), c(0.8, 0.1, 0.1));

	// Chromosome of length 1 mb
	initializeGenomicElement(g1, 0, 1000000);

	// Base recombination rate
	initializeRecombinationRate(1.60e-8);

	// Constants used in slurm scripts for batch arrays
	//defineConstant("slurmID", slurmIDi);
	//defineConstant("EG", EGi);
	//defineConstant("K", Ki);
	//defineConstant("simID", simIDi);
	//defineConstant("nSamp", nSampi);
	//defineConstant("Rep", Repi);
	//defineConstant("Gen", Geni);
	//defineConstant("SJ", SJi);
	//defineConstant("ST", STi);
	//defineConstant("tmpdir", paste(c("/dev/shm/csm6hg", SJ, ST), sep="/"));

	// Constants for testing purposes
	defineConstant("slurmID", 1); // Array number
	defineConstant("EG", 1.1); // Exponential growth rate
	defineConstant("K", 1000); // Carrying capacity
	defineConstant("CP", 20); // Freqeuncy of bottleneck (every n gens)
	defineConstant("MS", 1-0.8); // Magnitude of bottleneck (% surviving)
	defineConstant("Sex", 10); // Frequency of sex (every n gens)
	defineConstant("SexP", 1-1); // Proportion of sexual events
	defineConstant("simID", 1); // Simulation number
	defineConstant("nSamp", 15); // Sample of individuls for VCF
	defineConstant("Rep", 10); // n replicate VCFs
	defineConstant("Gen", 10000); // Final generation
	defineConstant("SJ", 1); // Directory name for ram
	defineConstant("ST", 1); // Subdirectory name for ram
	defineConstant("tmpdir", "/home/connor/test"); // Output directory for testing

	// Set seed
	setSeed(simID);
}

// Demographics - exponential growth and stabilization

// Initial population
1 { sim.addSubpop("p1", StartPop) ;

	// Import the burn-in VCF
	p1.genomes.readFromVCF("/scratch/yey2sn/Metapop_Analysis/slim_ErE/Neutral_100k.vcf", m1);
	//sim.readFromPopulationFile(BurninPath + "SimRep" + SimRepID + "/" + BurninFilename);

	// Add mutations
	sim.subpopulations.genomes.addNewMutation(m1, 0.0, 0);

	// How many SNPs
	print(size(unique(sim.subpopulations.genomes.mutationsOfType(m1))));
	print(size(unique(sim.subpopulations.genomes.mutationsOfType(m1).position)));

}

// Start demographic model
2: {

	// Exponential growth
	if (!any(sim.generation == c(seq(CP, Gen, CP)))) {
		newSize = asInteger(round(p1.individualCount * EG));
		p1.setSubpopulationSize(newSize);

			// If the population overshoots - make the population size = K
			if (newSize > K) {
			p1.setSubpopulationSize(K);
		}
	}

	// Cyclical population size change
	if(any(sim.generation == c(seq(CP, Gen, CP)))) {

		// Bottleneck event
		newSize = p1.individualCount * MS;
		p1.setSubpopulationSize(asInteger(round(newSize)));

	}

	// Sexual recombination events
	if(any(sim.generation == c(seq(Sex, Gen, Sex)))) {

		// Initiate sex
		p1.setCloningRate(SexP);
	}
}

// Writes output for population samples
1: late() {

	if (!sim.generation == Gen) {

		// Population size output
		line = (sim.generation +
			"\t" + Gen +
			"\t" + p1.individualCount +
			"\t" + simID +
			"\t" + EG +
			"\t" + K +
			"\t" + nSamp) ;

		writeFile(paste(c(paste(c(tmpdir, "/slim_constant-pop"), sep=""),
			slurmID, EG, K, nSamp, Gen, simID, ".txt"), sep="_"), line, append=T);
	}

	// VCF output at end of simulation
	if (sim.generation == Gen) {

		// For loop for replicate VCF output
		for (element in 1:Rep) {
			p1.outputVCFSample(nSamp, filePath=paste(c(paste(c(tmpdir, "/slim_constant"), sep=""),
				slurmID, EG, K, element, nSamp, sim.generation, Gen, simID, ".vcf"), sep="_"));
		}

		// End Simulation
		sim.simulationFinished();

	}
}

// Full stop necessary
10001 { sim.simulationFinished(); }
