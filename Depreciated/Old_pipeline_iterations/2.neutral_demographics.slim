// Simple neutral simulation
initialize() {

        // Daphnia pulex mutation rate
        initializeMutationRate(5.69e-9);

        // Neutral mutation parameters
        initializeMutationType("m1", 0.5, "f", 0.0);

        // Genome uses neutral mutations
        initializeGenomicElementType("g1", c(m1), 1);

        // Chromosome of length 1 mb
        initializeGenomicElement(g1, 0, 1000000);

        // No recombination
        initializeRecombinationRate(0);

        // Constants used in slurm scripts for batch arrays
        defineConstant("slurmID", slurmIDi);
	      defineConstant("EG", EGi);
        defineConstant("K", Ki);
        defineConstant("simID", simIDi);
        defineConstant("nSamp", nSampi);
        defineConstant("Rep", Repi);
        defineConstant("Gen", Geni);
	      defineConstant("SJ", SJi);
	      defineConstant("ST", STi);

        defineConstant("slurmID", 1);
	      defineConstant("EG", 1.1);
        defineConstant("K", 10000);
        defineConstant("simID", 1);
        defineConstant("nSamp", 15);
        defineConstant("Rep", 10);
        defineConstant("Gen", 1000);
	      defineConstant("SJ", 1);
	      defineConstant("ST", 1);
        defineConstant("tmpdir", "/home/connor/test");
	      //defineConstant("tmpdir", paste(c("/dev/shm/csm6hg", SJ, ST), sep="/"));

	// Set seed
	setSeed(simID);
}

// Demographics - exponential growth and stabilization

        // Initial population
        1 { sim.addSubpop("p1", 1) ;
                }

        // Exponential growth
        2: {
        if (p1.individualCount < K) {
                newSize = asInteger(round(EG^(sim.generation-1) + p1.individualCount));
                p1.setSubpopulationSize(newSize);
              }

        // If the population overshoots - make the population size = K
        if (p1.individualCount >= K) {
                  p1.setSubpopulationSize(K);
            }

        // Cyclical population size change
        if(any(sim.generation == c(seq(sim.generation, Gen, CP)))) {
              newSize = p1.individualCount * MS;
          		p1.setSubpopulationSize(asInteger(newSize));
          	}
}

// Writes outputs for population samples
1: late() {

	if (sim.generation <= Gen) {

		// Population size output
		line = (sim.generation +
			"\t" + Gen +
			"\t" + p1.individualCount +
			"\t" + simID +
			"\t" + EG +
			"\t" + K +
			"\t" + nSamp) ;

		writeFile(paste(c(paste(c(tmpdir, "/slim_constant-pop"), sep=""),
					slurmID, EG, K, nSamp, Gen, simID, ".txt"), sep="_"), line, append=T);
	}

	// VCF output
	if (sim.generation == Gen) {

	for (element in 1:Rep) {
		p1.outputVCFSample(nSamp, filePath=paste(c(paste(c(tmpdir, "/slim_constant"), sep=""),
						slurmID, EG, K, element, nSamp, sim.generation, Gen, simID, ".vcf"), sep="_"));
		}

	// End Simulation
	sim.simulationFinished();

	}
}

// Full stop necessary
1001 { sim.simulationFinished(); }
