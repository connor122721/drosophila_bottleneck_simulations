# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]*Rep))), dt) %>%
mutate(simID=round(abs(rnorm(1, 1e8, n=c(1:dim(dt)[1]*Rep))), digits=0)) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "simID"))
# Remove lines with nMin > nMax
dt <- dt[!nMin > nMax]
# Fix slurmid column
dt <- data.table(dt %>% mutate(slurmID=c(1:c(dim(dt)[1]))))
# Library
library(data.table)
library(tidyverse)
# Exponential start and constant growth population
StartPop = 1500 # Should equal burn-in VCF samples
nMax = seq(from=10000, to=74000, by=1000) # Maximum population size
#bottleneck = c(0, 0.25, 0.5, 0.8, seq(0.9, 0.99, by=0.01)) # Magnitude of bottleneck (%)
bottleneck = c(0) # Magnitude of bottleneck %
nMin = seq(from=1000, to=7000, by=1000)
Rep = 50 # Number of VCFs to output (from unique simulation seeds)
nSamp = 50 # Number of samples for output VCF
Gen = 50 # End of simulation
# Expanding parameters
dt <- as.data.table(expand.grid(nMax, nMin, Rep, nSamp, Gen))
setnames(dt, names(dt), c("nMax", "nMin", "Rep", "nSamp", "Gen"))
# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]*Rep))), dt) %>%
mutate(simID=round(abs(rnorm(1, 1e8, n=c(1:dim(dt)[1]*Rep))), digits=0)) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "simID"))
# Remove lines with nMin > nMax
dt <- dt[!nMin > nMax]
# Fix slurmid column
dt <- data.table(dt %>% mutate(slurmID=c(1:c(dim(dt)[1]))))
# Exponential start and constant growth population
StartPop = 1500 # Should equal burn-in VCF samples
nMax = seq(from=10000, to=74000, by=1000) # Maximum population size
#bottleneck = c(0, 0.25, 0.5, 0.8, seq(0.9, 0.99, by=0.01)) # Magnitude of bottleneck (%)
bottleneck = c(0) # Magnitude of bottleneck %
nMin = seq(from=1000, to=7000, by=1000)
Rep = 50 # Number of VCFs to output (from unique simulation seeds)
nSamp = 50 # Number of samples for output VCF
Gen = 50 # End of simulation
# Expanding parameters
dt <- as.data.table(expand.grid(nMax, nMin, Rep, nSamp, Gen))
setnames(dt, names(dt), c("nMax", "nMin", "Rep", "nSamp", "Gen"))
# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]*Rep))), dt) %>%
mutate(simID=round(abs(rnorm(1, 1e8, n=c(1:dim(dt)[1]*Rep))), digits=0)) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "simID"))
# Remove lines with nMin > nMax
dt <- dt[!nMin > nMax]
# Fix slurmid column
dt <- data.table(dt %>% mutate(slurmID=c(1:c(dim(dt)[1]))))
# Exponential start and constant growth population
StartPop = 1500 # Should equal burn-in VCF samples
nMax = seq(from=10000, to=74000, by=1000) # Maximum population size
#bottleneck = c(0, 0.25, 0.5, 0.8, seq(0.9, 0.99, by=0.01)) # Magnitude of bottleneck (%)
bottleneck = c(0) # Magnitude of bottleneck %
nMin = seq(from=1000, to=7000, by=1000)
Rep = 10 # Number of VCFs to output (from unique simulation seeds)
nSamp = 50 # Number of samples for output VCF
Gen = 50 # End of simulation
# Expanding parameters
dt <- as.data.table(expand.grid(nMax, nMin, Rep, nSamp, Gen))
setnames(dt, names(dt), c("nMax", "nMin", "Rep", "nSamp", "Gen"))
# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]*Rep))), dt) %>%
mutate(simID=round(abs(rnorm(1, 1e8, n=c(1:dim(dt)[1]*Rep))), digits=0)) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "simID"))
# Remove lines with nMin > nMax
dt <- dt[!nMin > nMax]
# Fix slurmid column
dt <- data.table(dt %>% mutate(slurmID=c(1:c(dim(dt)[1]))))
# Library
library(data.table)
library(tidyverse)
# Exponential start and constant growth population
StartPop = 1500 # Should equal burn-in VCF samples
nMax = seq(from=10000, to=74000, by=1000) # Maximum population size
#bottleneck = c(0, 0.25, 0.5, 0.8, seq(0.9, 0.99, by=0.01)) # Magnitude of bottleneck (%)
bottleneck = c(0) # Magnitude of bottleneck %
nMin = seq(from=1000, to=7000, by=500)
Rep = 10 # Number of VCFs to output (from unique simulation seeds)
nSamp = 50 # Number of samples for output VCF
Gen = 50 # End of simulation
# Expanding parameters
dt <- as.data.table(expand.grid(nMax, nMin, Rep, nSamp, Gen))
setnames(dt, names(dt), c("nMax", "nMin", "Rep", "nSamp", "Gen"))
# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]*Rep))), dt) %>%
mutate(simID=round(abs(rnorm(1, 1e8, n=c(1:dim(dt)[1]*Rep))), digits=0)) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "simID"))
# Remove lines with nMin > nMax
dt <- dt[!nMin > nMax]
# Fix slurmid column
dt <- data.table(dt %>% mutate(slurmID=c(1:c(dim(dt)[1]))))
# Exclude already ran samples
dt2 <- data.table(read.csv("/scratch/csm6hg/slim_bottleneck/model_paramList3"))
# Library
library(data.table)
library(tidyverse)
# Exponential start and constant growth population
StartPop = 1500 # Should equal burn-in VCF samples
nMax = seq(from=10000, to=74000, by=1000) # Maximum population size
#bottleneck = c(0, 0.25, 0.5, 0.8, seq(0.9, 0.99, by=0.01)) # Magnitude of bottleneck (%)
bottleneck = c(0) # Magnitude of bottleneck %
nMin = seq(from=1000, to=7000, by=500)
Rep = 50 # Number of VCFs to output (from unique simulation seeds)
nSamp = 50 # Number of samples for output VCF
Gen = 50 # End of simulation
# Expanding parameters
dt <- as.data.table(expand.grid(nMax, nMin, Rep, nSamp, Gen))
setnames(dt, names(dt), c("nMax", "nMin", "Rep", "nSamp", "Gen"))
# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]*Rep))), dt) %>%
mutate(simID=round(abs(rnorm(1, 1e8, n=c(1:dim(dt)[1]*Rep))), digits=0)) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "simID"))
# Remove lines with nMin > nMax
dt <- dt[!nMin > nMax]
# Fix slurmid column
dt <- data.table(dt %>% mutate(slurmID=c(1:c(dim(dt)[1]))))
# Exclude already ran samples
dt2 <- data.table(read.csv("/scratch/csm6hg/slim_bottleneck/model_paramList3"))
dt[nMax %in% dt2$nMax &
nMin %in% dt2$nMin]
# Library
library(data.table)
library(tidyverse)
# Exponential start and constant growth population
StartPop = 1500 # Should equal burn-in VCF samples
nMax = seq(from=10000, to=74000, by=1000) # Maximum population size
#bottleneck = c(0, 0.25, 0.5, 0.8, seq(0.9, 0.99, by=0.01)) # Magnitude of bottleneck (%)
bottleneck = c(0) # Magnitude of bottleneck %
nMin = seq(from=1000, to=7000, by=100)
Rep = 50 # Number of VCFs to output (from unique simulation seeds)
nSamp = 50 # Number of samples for output VCF
Gen = 50 # End of simulation
# Expanding parameters
dt <- as.data.table(expand.grid(nMax, nMin, Rep, nSamp, Gen))
setnames(dt, names(dt), c("nMax", "nMin", "Rep", "nSamp", "Gen"))
# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]*Rep))), dt) %>%
mutate(simID=round(abs(rnorm(1, 1e8, n=c(1:dim(dt)[1]*Rep))), digits=0)) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "simID"))
# Remove lines with nMin > nMax
dt <- dt[!nMin > nMax]
# Fix slurmid column
dt <- data.table(dt %>% mutate(slurmID=c(1:c(dim(dt)[1]))))
# Exponential start and constant growth population
StartPop = 1500 # Should equal burn-in VCF samples
nMax = seq(from=10000, to=74000, by=1000) # Maximum population size
#bottleneck = c(0, 0.25, 0.5, 0.8, seq(0.9, 0.99, by=0.01)) # Magnitude of bottleneck (%)
bottleneck = c(0) # Magnitude of bottleneck %
nMin = seq(from=1000, to=7000, by=1000)
Rep = 50 # Number of VCFs to output (from unique simulation seeds)
nSamp = 50 # Number of samples for output VCF
Gen = 50 # End of simulation
# Expanding parameters
dt <- as.data.table(expand.grid(nMax, nMin, Rep, nSamp, Gen))
setnames(dt, names(dt), c("nMax", "nMin", "Rep", "nSamp", "Gen"))
# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]*Rep))), dt) %>%
mutate(simID=round(abs(rnorm(1, 1e8, n=c(1:dim(dt)[1]*Rep))), digits=0)) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "simID"))
# Remove lines with nMin > nMax
dt <- dt[!nMin > nMax]
# Fix slurmid column
dt <- data.table(dt %>% mutate(slurmID=c(1:c(dim(dt)[1]))))
# Exclude already ran samples
dt2 <- data.table(read.csv("/scratch/csm6hg/slim_bottleneck/model_paramList3"))
dt[nMax %in% dt2$nMax &
nMin %in% dt2$nMin]
# Library
library(data.table)
library(tidyverse)
# Exponential start and constant growth population
StartPop = 1500 # Should equal burn-in VCF samples
nMax = seq(from=10000, to=74000, by=1000) # Maximum population size
#bottleneck = c(0, 0.25, 0.5, 0.8, seq(0.9, 0.99, by=0.01)) # Magnitude of bottleneck (%)
bottleneck = c(0) # Magnitude of bottleneck %
nMin = seq(from=1000, to=7000, by=1000)
Rep = 50 # Number of VCFs to output (from unique simulation seeds)
nSamp = 50 # Number of samples for output VCF
Gen = 50 # End of simulation
# Expanding parameters
dt <- as.data.table(expand.grid(nMax, nMin, Rep, nSamp, Gen))
setnames(dt, names(dt), c("nMax", "nMin", "Rep", "nSamp", "Gen"))
# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]*Rep))), dt) %>%
mutate(simID=round(abs(rnorm(1, 1e8, n=c(1:dim(dt)[1]*Rep))), digits=0)) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "simID"))
# Remove lines with nMin > nMax
dt <- dt[!nMin > nMax]
# Fix slurmid column
dt <- data.table(dt %>% mutate(slurmID=c(1:c(dim(dt)[1]))))
# Exclude already ran samples
dt2 <- data.table(read.csv("/scratch/csm6hg/slim_bottleneck/model_paramList3"))
dt[nMax %in% dt2$nMax &
nMin %in% dt2$nMin]
# Library
library(data.table)
library(tidyverse)
# Exponential start and constant growth population
StartPop = 1500 # Should equal burn-in VCF samples
nMax = seq(from=10000, to=74000, by=1000) # Maximum population size
#bottleneck = c(0, 0.25, 0.5, 0.8, seq(0.9, 0.99, by=0.01)) # Magnitude of bottleneck (%)
bottleneck = c(0) # Magnitude of bottleneck %
nMin = seq(from=1000, to=7000, by=1000)
Rep = 40 # Number of VCFs to output (from unique simulation seeds)
nSamp = 50 # Number of samples for output VCF
Gen = 50 # End of simulation
# Expanding parameters
dt <- as.data.table(expand.grid(nMax, nMin, Rep, nSamp, Gen))
setnames(dt, names(dt), c("nMax", "nMin", "Rep", "nSamp", "Gen"))
# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]*Rep))), dt) %>%
mutate(simID=round(abs(rnorm(1, 1e8, n=c(1:dim(dt)[1]*Rep))), digits=0)) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "simID"))
# Remove lines with nMin > nMax
dt <- dt[!nMin > nMax]
# Fix slurmid column
dt <- data.table(dt %>% mutate(slurmID=c(1:c(dim(dt)[1]))))
# Exclude already ran samples
dt2 <- data.table(read.csv("/scratch/csm6hg/slim_bottleneck/model_paramList3"))
# Library
library(data.table)
library(tidyverse)
# Exponential start and constant growth population
StartPop = 1500 # Should equal burn-in VCF samples
nMax = seq(from=10000, to=74000, by=1000) # Maximum population size
#bottleneck = c(0, 0.25, 0.5, 0.8, seq(0.9, 0.99, by=0.01)) # Magnitude of bottleneck (%)
bottleneck = c(0) # Magnitude of bottleneck %
nMin = seq(from=1000, to=7000, by=100)
Rep = 40 # Number of VCFs to output (from unique simulation seeds)
nSamp = 50 # Number of samples for output VCF
Gen = 50 # End of simulation
# Expanding parameters
dt <- as.data.table(expand.grid(nMax, nMin, Rep, nSamp, Gen))
setnames(dt, names(dt), c("nMax", "nMin", "Rep", "nSamp", "Gen"))
# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]*Rep))), dt) %>%
mutate(simID=round(abs(rnorm(1, 1e8, n=c(1:dim(dt)[1]*Rep))), digits=0)) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "simID"))
# Remove lines with nMin > nMax
dt <- dt[!nMin > nMax]
View(dt)
# Fix slurmid column
dt <- data.table(dt %>% mutate(slurmID=c(1:c(dim(dt)[1]))))
dt$simID
unique(dt$simID)
length(unique(dt$simID))
# Library
library(data.table)
library(tidyverse)
# Exponential start and constant growth population
StartPop = 1500 # Should equal burn-in VCF samples
nMax = seq(from=10000, to=74000, by=1000) # Maximum population size
#bottleneck = c(0, 0.25, 0.5, 0.8, seq(0.9, 0.99, by=0.01)) # Magnitude of bottleneck (%)
bottleneck = c(0) # Magnitude of bottleneck %
nMin = seq(from=1000, to=7000, by=100)
Rep = 40 # Number of VCFs to output (from unique simulation seeds)
nSamp = 50 # Number of samples for output VCF
Gen = 50 # End of simulation
# Expanding parameters
dt <- as.data.table(expand.grid(nMax, nMin, Rep, nSamp, Gen))
setnames(dt, names(dt), c("nMax", "nMin", "Rep", "nSamp", "Gen"))
# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]*Rep))), dt) %>%
mutate(simID=round(abs(rnorm(1, 1e8, n=c(1:dim(dt)[1]*Rep))), digits=0)) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
# Library
library(data.table)
library(tidyverse)
# Exponential start and constant growth population
StartPop = 1500 # Should equal burn-in VCF samples
nMax = seq(from=10000, to=74000, by=1000) # Maximum population size
#bottleneck = c(0, 0.25, 0.5, 0.8, seq(0.9, 0.99, by=0.01)) # Magnitude of bottleneck (%)
bottleneck = c(0) # Magnitude of bottleneck %
nMin = seq(from=1000, to=7000, by=100)
Rep = 100 # Number of VCFs to output (from unique simulation seeds)
nSamp = 50 # Number of samples for output VCF
Gen = 50 # End of simulation
# Expanding parameters
dt <- as.data.table(expand.grid(nMax, nMin, Rep, nSamp, Gen))
setnames(dt, names(dt), c("nMax", "nMin", "Rep", "nSamp", "Gen"))
# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]*Rep))), dt) %>%
mutate(simID=round(abs(rnorm(1, 1e8, n=c(1:dim(dt)[1]*Rep))), digits=0)) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "simID"))
# Remove lines with nMin > nMax
dt <- dt[!nMin > nMax]
# Library
library(data.table)
library(tidyverse)
# Exponential start and constant growth population
StartPop = 1500 # Should equal burn-in VCF samples
nMax = seq(from=10000, to=74000, by=1000) # Maximum population size
#bottleneck = c(0, 0.25, 0.5, 0.8, seq(0.9, 0.99, by=0.01)) # Magnitude of bottleneck (%)
bottleneck = c(0) # Magnitude of bottleneck %
nMin = seq(from=1000, to=7000, by=100)
Rep = 100 # Number of VCFs to output (from unique simulation seeds)
nSamp = 50 # Number of samples for output VCF
Gen = 50 # End of simulation
# Expanding parameters
dt <- as.data.table(expand.grid(nMax, nMin, Rep, nSamp, Gen))
setnames(dt, names(dt), c("nMax", "nMin", "Rep", "nSamp", "Gen"))
View(dt)
# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]*Rep))), dt) %>%
mutate(simID=round(abs(rnorm(1, 1e8, n=c(1:dim(dt)[1]*Rep))), digits=0)) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "simID"))
# Remove lines with nMin > nMax
dt <- dt[!nMin > nMax]
# Fix slurmid column
dt <- data.table(dt %>% mutate(slurmID=c(1:c(dim(dt)[1]))))
# Exclude already ran samples
dt2 <- data.table(read.csv("/scratch/csm6hg/slim_bottleneck/model_paramList3"))
dt[nMax %in% dt2$nMax &
nMin %in% dt2$nMin]
View(dt)
# Library
library(data.table)
library(tidyverse)
# Exponential start and constant growth population
StartPop = 1500 # Should equal burn-in VCF samples
nMax = seq(from=10000, to=74000, by=1000) # Maximum population size
#bottleneck = c(0, 0.25, 0.5, 0.8, seq(0.9, 0.99, by=0.01)) # Magnitude of bottleneck (%)
bottleneck = c(0) # Magnitude of bottleneck %
nMin = seq(from=1000, to=7000, by=100)
Rep = 100 # Number of VCFs to output (from unique simulation seeds)
nSamp = 50 # Number of samples for output VCF
Gen = 50 # End of simulation
# Expanding parameters
dt <- as.data.table(expand.grid(nMax, nMin, Rep, nSamp, Gen))
setnames(dt, names(dt), c("nMax", "nMin", "Rep", "nSamp", "Gen"))
# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]*Rep))), dt) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
library(tidyverse)
# Exponential start and constant growth population
StartPop = 1500 # Should equal burn-in VCF samples
nMax = seq(from=10000, to=74000, by=1000) # Maximum population size
#bottleneck = c(0, 0.25, 0.5, 0.8, seq(0.9, 0.99, by=0.01)) # Magnitude of bottleneck (%)
bottleneck = c(0) # Magnitude of bottleneck %
nMin = seq(from=1000, to=7000, by=100)
Rep = 100 # Number of VCFs to output (from unique simulation seeds)
nSamp = 50 # Number of samples for output VCF
Gen = 50 # End of simulation
# Expanding parameters
dt <- as.data.table(expand.grid(nMax, nMin, Rep, nSamp, Gen))
setnames(dt, names(dt), c("nMax", "nMin", "Rep", "nSamp", "Gen"))
View(dt)
# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]))), dt) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
View(dt)
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "simID"))
View(dt)
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "simID"))
View(dt)
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "rowID"))
# Remove lines with nMin > nMax
dt <- dt[!nMin > nMax]
View(dt)
# Fix slurmid column
dt <- data.table(dt %>% mutate(slurmID=c(1:c(dim(dt)[1]))))
View(dt)
# Libraries
library(data.table)
library(foreach)
library(forcats)
library(gmodels)
library(poolSeq)
library(poolfstat)
library(viridis)
library(FactoMineR)
library(doParallel)
library(tidyverse)
7195*3*100
(7195*3*100)/60
(7195*2*100)/60
# Library
library(data.table)
library(tidyverse)
# Exponential start and constant growth population
StartPop = 1500 # Should equal burn-in VCF samples
nMax = c(1000,2500,5000, 75000, 100000,
seq(from=10000, to=74000, by=1000)) # Maximum population size
bottleneck = c(0) # Magnitude of bottleneck %
nMin = c(50,100,500,1000,2500,7500,10000,25000,50000,75000,100000,
nMax,
seq(from=1000, to=7000, by=500))
Rep = 100 # Number of VCFs to output (from unique simulation seeds)
nSamp = 50 # Number of samples for output VCF
Gen = 50 # End of simulation
# Expanding parameters
dt <- as.data.table(expand.grid(nMax, nMin, Rep, nSamp, Gen))
setnames(dt, names(dt), c("nMax", "nMin", "Rep", "nSamp", "Gen"))
# Create variables
dt <- data.table(cbind(data.table(slurmID=c(1:c(dim(dt)[1]))), dt) %>%
group_by(nMin, nMax) %>%
mutate(rowID=row_number()))
# Reorder
setcolorder(dt, c("slurmID", "nMax", "nMin", "Rep", "nSamp", "Gen", "rowID"))
# Remove lines with nMin > nMax
dt <- dt[!nMin > nMax]
# Fix slurmid column
dt <- data.table(dt %>% mutate(slurmID=c(1:c(dim(dt)[1]))))
??sample.alleles()
# Bottleneck size
dt %>%
mutate(bottle=(nMax-nMin)/nMax) %>%
ggplot(.,
aes(x=as.factor(nMin),
y=as.factor(nMax),
fill=bottle*100)) +
geom_raster() +
labs(x="Minimum population size",
y="Maximum population size",
fill="Bottleneck size (%)") +
theme_classic() +
scale_x_discrete(breaks = c(50, 2500, 7500, 25000,
50000, 100000)) +
scale_y_discrete(breaks = c(50, 2500, 7500, 25000,
50000, 100000)) +
scale_fill_viridis(option = "magma", begin=0, end=1) +
theme(title = element_text(face="bold", size=15),
legend.text = element_text(face="bold", size=12),
legend.title = element_text(face="bold", size=15),
legend.background = element_blank(),
strip.text =element_text(face="bold", size=15),
axis.text.x = element_text(face="bold", size=18),
axis.text.y = element_text(face="bold", size=18),
axis.title.x = element_text(face="bold", size=20),
axis.title.y = element_text(face="bold", size=20))
# Libraries
library(data.table)
library(tidyverse)
library(foreach)
library(forcats)
library(viridis)
library(gganimate)
library(abc)
library(abc.data)
library(ggrepel)
library(ggforce)
source('C:/Users/Conno/Desktop/gitmaster/drosophila_demography/Scripts/New/3.slim_vcf_output_readvcf_pairwisefst_pca.R')
# Libraries
library(data.table)
library(foreach)
library(forcats)
library(gmodels)
library(gtools)
library(poolSeq)
library(poolfstat)
library(FactoMineR)
library(tidyverse)
library(adegenet)
# Libraries
library(data.table)
library(foreach)
library(forcats)
library(gmodels)
library(gtools)
library(poolSeq)
library(poolfstat)
library(FactoMineR)
library(tidyverse)
library(adegenet)
